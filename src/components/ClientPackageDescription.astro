---
import type { ClientPackage } from "../schemas/client-package";
import { unified } from "unified";
import remarkParse from "remark-parse";
import remarkRehype from "remark-rehype";
import rehypeStringify from "rehype-stringify";
import ClassesSection from "./client-package/ClassesSection.astro";
import FunctionsSection from "./client-package/FunctionsSection.astro";

interface Props {
  package: ClientPackage;
}

const { package: pkg } = Astro.props;

// Helper function to render markdown descriptions
const renderDescription = async (description: string) => {
  try {
    const processor = unified()
      .use(remarkParse)
      .use(remarkRehype)
      .use(rehypeStringify);

    const result = await processor.process(description);
    return String(result);
  } catch (error) {
    // Fallback to plain text if markdown rendering fails
    console.warn("Failed to render markdown:", error);
    return `<p>${description}</p>`;
  }
};

// Pre-render main description only
const renderedMainDescription = pkg?.description
  ? await renderDescription(pkg.description)
  : undefined;
---

<!-- Main Package Description -->{
  renderedMainDescription && <Fragment set:html={renderedMainDescription} />
}

<ClassesSection classes={pkg.classes} />
<FunctionsSection functions={pkg.functions} />
