---
import type { ClientPackage } from "../schemas/client-package";

interface Props {
  package: ClientPackage;
}

const { package: pkg } = Astro.props;
---

{pkg?.description && <p>{pkg.description}</p>}

{
  pkg.types && (
    <>
      <h2 id="types">Types</h2>
      {pkg.types.map((t) => (
        <section id={`type-${t.enum}`} class="mb-4">
          <h3>{t.enum}</h3>
          {t.description && <p>{t.description}</p>}
          <ul>
            {t.values.map((v) => (
              <li>{v}</li>
            ))}
          </ul>
        </section>
      ))}
    </>
  )
}

{
  pkg.classes && (
    <>
      <h2 id="classes">Classes</h2>
      {pkg.classes.map((c) => (
        <section id={`class-${c.name}`} class="mb-4">
          <h3>{c.name}</h3>
          {c.description && <p>{c.description}</p>}

          {c.constructors && (
            <>
              <h4>Constructors</h4>
              <ul>
                {c.constructors.map((constructor) => (
                  <li>
                    <code>
                      {constructor.name
                        ? `${c.name}.${constructor.name}`
                        : c.name}
                    </code>
                    (
                    {constructor.params?.map((param, idx) => (
                      <>
                        {idx > 0 && ", "}
                        {param.name}: {param.type}
                      </>
                    ))}
                    )
                    {constructor.description && (
                      <> — {constructor.description}</>
                    )}
                  </li>
                ))}
              </ul>
            </>
          )}

          {c.properties && (
            <>
              <h4>Properties</h4>
              <ul>
                {c.properties.map((p) => (
                  <li>
                    <code>{p.name}</code>: <code>{p.type}</code>
                    {p.readonly ? " (readonly)" : ""}
                    {p.description && <> — {p.description}</>}
                  </li>
                ))}
              </ul>
            </>
          )}

          {c.methods && (
            <>
              <h4>Methods</h4>
              <ul>
                {c.methods.map((m) => (
                  <li>
                    <code>{m.name}</code>
                    {m.async ? " async" : ""}(
                    {m.params?.map((param, idx) => (
                      <>
                        {idx > 0 && ", "}
                        {param.name}: {param.type}
                      </>
                    ))}
                    ){m.returns ? <>: {m.returns}</> : ""}
                    {m.description && <> — {m.description}</>}
                  </li>
                ))}
              </ul>
            </>
          )}

          {c.statics && (
            <>
              <h4>Static Methods</h4>
              <ul>
                {c.statics.map((s) => (
                  <li>
                    <code>{s.name}</code>
                    {s.async ? " async" : ""}(
                    {s.params?.map((param, idx) => (
                      <>
                        {idx > 0 && ", "}
                        {param.name}: {param.type}
                      </>
                    ))}
                    ){s.returns ? <>: {s.returns}</> : ""}
                    {s.description && <> — {s.description}</>}
                  </li>
                ))}
              </ul>
            </>
          )}
        </section>
      ))}
    </>
  )
}

{
  pkg.functions && (
    <>
      <h2 id="functions">Functions</h2>
      <ul>
        {pkg.functions.map((f) => (
          <li>
            <code>{f.name}</code>
            {f.async ? " async" : ""}(
            {f.params?.map((param, idx) => (
              <>
                {idx > 0 && ", "}
                {param.name}: {param.type}
              </>
            ))}
            ){f.returns ? <>: {f.returns}</> : ""}
            {f.description && <> — {f.description}</>}
          </li>
        ))}
      </ul>
    </>
  )
}

{
  pkg.errors && (
    <>
      <h2 id="errors">Errors</h2>
      <ul>
        {pkg.errors.map((e) => (
          <li>
            <code>{e.name}</code>
            {e.description && <> — {e.description}</>}
          </li>
        ))}
      </ul>
    </>
  )
}
