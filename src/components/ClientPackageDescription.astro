---
import type { ClientPackage } from "../schemas/client-package";
import { unified } from "unified";
import remarkParse from "remark-parse";
import remarkRehype from "remark-rehype";
import rehypeStringify from "rehype-stringify";

interface Props {
  package: ClientPackage;
}

const { package: pkg } = Astro.props;

// Helper function to render markdown descriptions
const renderDescription = async (description: string) => {
  try {
    const processor = unified()
      .use(remarkParse)
      .use(remarkRehype)
      .use(rehypeStringify);

    const result = await processor.process(description);
    return String(result);
  } catch (error) {
    // Fallback to plain text if markdown rendering fails
    console.warn("Failed to render markdown:", error);
    return `<p>${description}</p>`;
  }
};

// Pre-render main description only
const renderedMainDescription = pkg?.description
  ? await renderDescription(pkg.description)
  : undefined;
---

<!-- Main Package Description -->{
  renderedMainDescription && <Fragment set:html={renderedMainDescription} />
}

<!-- Types Section -->
{
  pkg.types && (
    <>
      <h2 id="types">Types</h2>
      {pkg.types.map((type) => (
        <section id={`type-${type.enum}`} class="mb-4">
          <h3>{type.enum}</h3>
          {type.description && <p>{type.description}</p>}
          <ul>
            {type.values.map((value) => (
              <li>{value}</li>
            ))}
          </ul>
        </section>
      ))}
    </>
  )
}

<!-- Classes Section -->
{
  pkg.classes && (
    <>
      <h2 id="classes">Classes</h2>
      {pkg.classes.map((classItem) => (
        <section id={`class-${classItem.name}`} class="mb-4">
          <h3>{classItem.name}</h3>
          {classItem.description && <p>{classItem.description}</p>}

          {/* Constructors */}
          {classItem.constructors && (
            <>
              <h4>Constructors</h4>
              <ul>
                {classItem.constructors.map((constructor) => (
                  <li>
                    <code>
                      {constructor.name
                        ? `${classItem.name}.${constructor.name}`
                        : classItem.name}
                    </code>
                    (
                    {constructor.params?.map((param, idx) => (
                      <>
                        {idx > 0 && ", "}
                        <code>{param.name}</code>: <code>{param.type}</code>
                      </>
                    ))}
                    )
                    {constructor.description && (
                      <div class="mt-1 ml-4 text-sm text-gray-600 dark:text-gray-400">
                        {constructor.description}
                      </div>
                    )}
                  </li>
                ))}
              </ul>
            </>
          )}

          {/* Properties */}
          {classItem.properties && (
            <>
              <h4>Properties</h4>
              <ul>
                {classItem.properties.map((property) => (
                  <li>
                    <code>{property.name}</code>: <code>{property.type}</code>
                    {property.readonly && " (readonly)"}
                    {property.description && (
                      <div class="mt-1 ml-4 text-sm text-gray-600 dark:text-gray-400">
                        {property.description}
                      </div>
                    )}
                  </li>
                ))}
              </ul>
            </>
          )}

          {/* Methods */}
          {classItem.methods && (
            <>
              <h4>Methods</h4>
              <ul>
                {classItem.methods.map((method) => (
                  <li>
                    <code>{method.name}</code>
                    {method.async && <code> async</code>}(
                    {method.params?.map((param, idx) => (
                      <>
                        {idx > 0 && ", "}
                        <code>{param.name}</code>: <code>{param.type}</code>
                      </>
                    ))}
                    {method.returns && (
                      <>
                        : <code>{method.returns}</code>
                      </>
                    )}
                    {method.description && (
                      <div class="mt-1 ml-4 text-sm text-gray-600 dark:text-gray-400">
                        {method.description}
                      </div>
                    )}
                  </li>
                ))}
              </ul>
            </>
          )}

          {/* Static Methods */}
          {classItem.statics && (
            <>
              <h4>Static Methods</h4>
              <ul>
                {classItem.statics.map((staticMethod) => (
                  <li>
                    <code>{staticMethod.name}</code>
                    {staticMethod.async && <code> async</code>}(
                    {staticMethod.params?.map((param, idx) => (
                      <>
                        {idx > 0 && ", "}
                        <code>{param.name}</code>: <code>{param.type}</code>
                      </>
                    ))}
                    {staticMethod.returns && (
                      <>
                        : <code>{staticMethod.returns}</code>
                      </>
                    )}
                    {staticMethod.description && (
                      <div class="mt-1 ml-4 text-sm text-gray-600 dark:text-gray-400">
                        {staticMethod.description}
                      </div>
                    )}
                  </li>
                ))}
              </ul>
            </>
          )}
        </section>
      ))}
    </>
  )
}

<!-- Functions Section -->
{
  pkg.functions && (
    <>
      <h2 id="functions">Functions</h2>
      <ul>
        {pkg.functions.map((func) => (
          <li>
            <code>{func.name}</code>
            {func.async && <code> async</code>}(
            {func.params?.map((param, idx) => (
              <>
                {idx > 0 && ", "}
                <code>{param.name}</code>: <code>{param.type}</code>
              </>
            ))}
            {func.returns && (
              <>
                : <code>{func.returns}</code>
              </>
            )}
            {func.description && (
              <div class="mt-1 ml-4 text-sm text-gray-600 dark:text-gray-400">
                {func.description}
              </div>
            )}
          </li>
        ))}
      </ul>
    </>
  )
}

<!-- Errors Section -->
{
  pkg.errors && (
    <>
      <h2 id="errors">Errors</h2>
      <ul>
        {pkg.errors.map((error) => (
          <li>
            <code>{error.name}</code>
            {error.description && (
              <div class="mt-1 ml-4 text-sm text-gray-600 dark:text-gray-400">
                {error.description}
              </div>
            )}
          </li>
        ))}
      </ul>
    </>
  )
}
